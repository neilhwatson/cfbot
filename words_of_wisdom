# Words of wisdom that the bot might say.
Don't write your own CFEngine policy, use existing frameworks and save time.
A self healing infrastructure means more uninterrupted vacation time.
Use vim_cf3 to edit your CFEngine policy in VIM: https://github.com/neilhwatson/vim_cf3 
Use cfengine.el to edit your CFEngine in Emacs: comes with Emacs, or use https://github.com/cfengine/core/blob/master/contrib/cfengine.el 
A mistake in your CFEngine policy is a mistake duplicated over a thousand hosts. Fully test your policy.
A well crafted cron script can rescue a broken CFEngine agent.
Third party CFEngine consultants: http://www.verticalsysadmin.com/cfengine/ps.htm
A CFEngine blog: http://cfengine.com/blog/
A CFEngine blog: http://evolvethinking.com/category/cfengine/
A CFEngine blog: http://www.cmdln.org/tag/cfengine/
A CFEngine blog: http://syslog.me/tag/cfengine/
A primer on autorunning your CFEngine policies: https://digitalelf.net/2014/07/a-primer-on-cfengine-3-dot-6-autorun/
Promising a whole file is better than promising a portion of it.
The CFEngine mailing list: https://groups.google.com/forum/#!forum/help-cfengine
When writing promises think of the end state and not the procedure to get there.
If you write your own CFEngine policy make it as reusable as possible.
Use comments, handles, and promisees to document your promises.
Embrace normal ordering, do not try to change it.
Like crond, CFEngine's environment when it starts a shell process is different than your shell environment. Test commands promises carefully.
The program cf-promises is a syntax checker and more. See cf-promises --help.
Central promise reporting is available through CFEngine addons CFEngine Enterprise, Rudder, and Delta Reporting. Search topics for more info.
Ask me for help.
Ask me about CFEngine best practices, and learn from CFEngine Champions.
CFEngine Enterprise is free up to 25 hosts.
Idempotence and convergence are the two fundamental CFEngine promise properties.
CFEngine is built on the foundation of promise theory.
Promise syntax: "promiser string" -> "optional promisee" attribute1 => "value1", attribute2 => "value2", ...;
The ifvarclass/if/unless, comment, handle, and meta promise attributes are universal and can apply to any promise.
New in 3.7: "mycontainer" data => '{ ... JSON data ... }'; # no need for parsejson()
New in 3.7: string_mustache() to create a string from a Mustache template.
New in 3.7: in Mustache templates, {{@}} is the iteration key.
New in 3.7: in Mustache templates, {{%variable}} serializes a variable as multi-line JSON and {{$variable}} in a single line.
New in 3.7: JSON output is canonical (keys in maps are always sorted).
New in 3.7: new packages promises with pluggable backends.  See https://docs.cfengine.com/latest/reference-standard-library-package_modules.html for the package module protocol.
New in 3.7: YAML support, see readyaml() and parseyaml() and readdata().
New in 3.7: readdata("auto|YAML|JSON|CSV", "filename") will use the file extension in auto mode.
New in 3.7: CSV read into data container with readcsv()
New in 3.7: if (same as ifvarclass) and unless universal promise attributes.
New in 3.7: @if macro to exclude a portion of text from parsing based on the CFEngine version.
New in 3.7: data_expand() function to expand variable references in a data container.
New in 3.7: def.json to make changing the defaults really easy.
